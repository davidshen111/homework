name: CI/CD Pipeline

on:
  push:
    branches:
      - master        # master branch for prod env.
      - develop     # develop branch for dev env.
  pull_request:
    branches:
      - master
      - develop

jobs:
  # 1. be build、ut、SonarQube analysis
  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Cache maven dependencies
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'
      - name: Build and run unit tests
        run: mvn clean install
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/
      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@v4.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 2. Deploy AWS (dev env.)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.ref == 'refs/heads/master'  # Only for development branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy frontend to S3
        run: |
          aws s3 sync ui/ s3://${{ secrets.AWS_S3_BUCKET_DEV }}/ --delete

      - name: Deploy backend to ECS
        run: |
          docker build \
            --build-arg DB_USERNAME_ARG=${{ secrets.AWS_RDS_USER }} \
            --build-arg DB_PASSWORD_ARG=${{ secrets.AWS_RDS_PSW }} \
            --build-arg DB_HOST_ARG=${{ secrets.AWS_RDS_ENDPOINT }} \
            -t my-backend -f dockerfile/Dockerfile .
          docker tag my-backend:latest ${{ secrets.AWS_ECR_URL_DEV }}:latest
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL_DEV }}
          docker push ${{ secrets.AWS_ECR_URL_DEV }}:latest
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER_DEV }} --service ${{ secrets.AWS_ECS_SERVICE_DEV }} --force-new-deployment

  # 3. Deploy AWS (prod env.)
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.ref == 'refs/heads/main'  # only for master branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy frontend to CloudFront
        run: |
          aws s3 sync ui/ s3://${{ secrets.AWS_S3_BUCKET_PROD }}/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

      - name: Deploy backend to ECS (multi-AZ)
        run: |
          docker build -t my-backend .
          docker tag my-backend:latest ${{ secrets.AWS_ECR_URL_PROD }}:latest
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL_PROD }}
          docker push ${{ secrets.AWS_ECR_URL_PROD }}:latest
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER_PROD }} --service ${{ secrets.AWS_ECS_SERVICE_PROD }} --force-new-deployment
