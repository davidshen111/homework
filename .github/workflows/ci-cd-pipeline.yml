name: CI/CD Pipeline

on:
  push:
    branches:
      - main        # 触发 main 分支，部署到 prod 环境
      - develop     # 触发 develop 分支，部署到 dev 环境
  pull_request:
    branches:
      - main
      - develop

jobs:
  # 1. 后端构建、单元测试、SonarQube 分析和 Docker 镜像构建
  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and run unit tests
        run: mvn clean install

      - name: Run SonarQube analysis
        uses: SonarSource/sonarcloud-github-action@v1
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}

  # 2. 部署到 AWS (dev 环境)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.ref == 'refs/heads/develop'  # 仅在开发分支部署

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy frontend to S3
        run: |
          aws s3 sync ui/ s3://${{ secrets.AWS_S3_BUCKET_DEV }}/ --delete

      - name: Deploy backend to ECS
        run: |
          docker build -t my-backend .
          docker tag my-backend:latest ${{ secrets.AWS_ECR_URL_DEV }}:latest
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL_DEV }}
          docker push ${{ secrets.AWS_ECR_URL_DEV }}:latest
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER_DEV }} --service ${{ secrets.AWS_ECS_SERVICE_DEV }} --force-new-deployment

  # 3. 部署到 AWS (prod 环境)
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.ref == 'refs/heads/main'  # 仅在主分支部署

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy frontend to CloudFront
        run: |
          aws s3 sync ui/ s3://${{ secrets.AWS_S3_BUCKET_PROD }}/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

      - name: Deploy backend to ECS (multi-AZ)
        run: |
          docker build -t my-backend .
          docker tag my-backend:latest ${{ secrets.AWS_ECR_URL_PROD }}:latest
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL_PROD }}
          docker push ${{ secrets.AWS_ECR_URL_PROD }}:latest
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER_PROD }} --service ${{ secrets.AWS_ECS_SERVICE_PROD }} --force-new-deployment
